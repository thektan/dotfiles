#!/usr/bin/env bash

############################################################
# Environment Variables                                    #
############################################################

# Defining hostname for liferay properties file
export HOSTNAME=$(hostname)

# Setting ANT_OPS variable for ant command
export ANT_OPTS="-Xms2048m -Xmx4096m -XX:MaxPermSize=2048m"

# Allocate more memory to prevent getting stuck on
# `[echo] Executing Gradle task: deploy` while running `ant all`.
export GRADLE_OPTS="-Xmx6g"

############################################################
# Java                                                     #
############################################################

# export JAVA_HOME_8=$(/usr/libexec/java_home -v1.8)
# export JAVA_HOME_7=$(/usr/libexec/java_home -v1.7)
# export JAVA_HOME_14=$(/usr/libexec/java_home -v14)

# Default java
export JAVA_HOME=/Library/Java/JavaVirtualMachines/zulu-11.jdk/Contents/Home

############################################################
# Functions
############################################################

# Find gradle in the root of git directory and execute it.
# Otherwise use globally installed gradle.
# @author Nate Cavanaugh
gradle() {
	local root_level=$(git rev-parse --show-toplevel 2>/dev/null)

	if [[ -n "$root_level" && -f "$root_level/gradlew" ]];
		then root_level="$root_level/gradlew"
	else
		root_level=$(which gradle)
fi

	"$root_level" $@
}

# Get the last mentioned JIRA ticket id from the commit log
# @author Nate Cavanaugh
latest_jira_ticket() {
	git log $1 --oneline | grep -Eo '([A-Z]{2,}-)([0-9]+)' -m 1;
}

# Open the url to the latest JIRA ticket referenced in the log
open_jira_ticket() {
	if [ -z "$1" ]; then
		latestTicket=$(latest_jira_ticket);

		echo "Opening https://liferay.atlassian.net/browse/$latestTicket"
		open https://liferay.atlassian.net/browse/$latestTicket;
	fi

	if [ -n "$1" ]; then
		echo "Opening https://liferay.atlassian.net/browse/$1"
		open https://liferay.atlassian.net/browse/$1;
	fi
}

# Gets the JIRA url for the latest JIRA ticket referenced in the log
latest_jira_ticket_url() {
	export latestTicketURL="https://liferay.atlassian.net/browse/$(latest_jira_ticket)";
}

# Submit a pull request
# $1 user - pull request recipient
# $2 repo - Github repository to submit pull request to
# $3 branch - branch to submit pull request to
#
# Depedencies:
# brew install gh (https://cli.github.com/) Github CLI
# brew install jq (https://formulae.brew.sh/formula/jq) JSON processor
# latest_jira_ticket()
# open_jira_ticket()
ghpr() {
	default_user="thektan";
	default_repo="liferay-portal";
	default_branch="master";

	if [ "$1" = "help" ]; then
		echo "Submits a Github pull request pulling information from the latest commit's Jira ticket.";
		echo "";
		echo "USAGE";
		echo "  ghpr <user> <repo> <branch>";
		echo "";
		echo "DEFAULTS";
		echo "  user: $default_user";
		echo "  repo: $default_repo";
		echo "  branch: $default_branch";
	else
		# Gather information
		user=$1;
		repo=$2;
		branch=$3;
		ticket=$(latest_jira_ticket);
		title="$ticket $(curl -s "https://liferay.atlassian.net/rest/api/2/issue/$ticket" | jq -r ".fields.summary")";

		# Set default user
		if [ -z "$user" ] || [ "$user" = "null" ]; then
			user=$default_user;
		fi;

		# Set default repo
		if [ -z "$repo" ] || [ "$repo" = "null" ]; then
			repo=$default_repo;
		fi;

		# Set default branch
		if [ -z "$branch" ] || [ "$branch" = "null" ]; then
			branch=$default_branch;
		fi;

		echo "Submitting pull request to $repo $user:$branch";

		# -z = string is null and has zero length
		# @see https://tldp.org/LDP/abs/html/comparison-ops.html
		if [ -z "$title" ] || [ "$title" = "null" ]; then
			title=""
		fi;

		# Open Jira ticket to manually workflow
		open_jira_ticket;

		# Open pull request
		gh pr create -R $user/$repo -B $branch -t $title -b "https://liferay.atlassian.net/browse/$ticket" -w;
	fi
}

# Checks if tomcat version in bundles folder is up to date.
# @author Bryan Engler
checkTomcatVersion() {
	localTomcatVersion=$(cat $1app.server.$USER.properties | grep app.server.tomcat.version= | cut -d "=" -f2);

	upstreamTomcatVersion=$(cat $1app.server.properties | grep app.server.tomcat.version= | cut -d "=" -f2);

	if [ $upstreamTomcatVersion != $localTomcatVersion ]; then
		echo "‚ö†Ô∏è  \e[33mWARNING: Tomcat version is out of sync, set $upstreamTomcatVersion in app.server.$USER.properties and run ant unzip-tomcat -f build-dist.xml"

		return 1;
	else
		echo "‚úÖ Tomcat version is up to date. Current version: $localTomcatVersion"

		return 0;
	fi
}

# Copies vscode settings.json files into portal modules to add peacock coloring.
setupPortalVSCode() {
	# portal-language-lang
	local portalLanguageLangDir=modules/apps/portal-language/portal-language-lang

	mkdir "$portalLanguageLangDir/.vscode";
	cp "$DOTFILES/vscode/portal-language-lang/settings.json" "$portalLanguageLangDir/.vscode";

	# portal-search-web
	local portalSearchWebDir=modules/apps/portal-search/portal-search-web

	mkdir "$portalSearchWebDir/.vscode";
	cp "$DOTFILES/vscode/portal-search-web/settings.json" "$portalSearchWebDir/.vscode";

	# search-experiences-web
	local searchExperiencesWebDir=modules/dxp/apps/search-experiences/search-experiences-web

	mkdir "$searchExperiencesWebDir/.vscode";
	cp "$DOTFILES/vscode/search-experiences-web/settings.json" "$searchExperiencesWebDir/.vscode";
}

# Updates libraries and builds portal.
# --setup: To only run setup commands (no ant all)
buildPortal() {
	checkTomcatVersion;

	# Stop the function if tomcat version isn't up to date.
	# This checks if function returns 1, a non-zero, which indicates an error.
	if [ $? -eq 1 ]; then
		return;
	fi

	cd ~/Developer/liferay-binaries-cache-2020;
	git pull origin master;

	cd -;
	ant setup-profile-dxp;
	ant setup-sdk;

	if [[ $* != *--setup* ]]; then
		ant all;

		setupPortalVSCode;
	fi
}

# Gets a formatted branch name for a Jira ticket.
#
# Example:
# jl LPS-155716
# **[LPS-155716](https://liferay.atlassian.net/browse/LPS-155716) SXPElement field localization breaks with nested fields**
getBranchName() {
	if [ -z "$1" ] || [ "$1" = "help" ]; then
		echo "Gets a formatted branch name for a Jira ticket.";
		echo "";
		echo "USAGE";
		echo "  getBranchName LPS-######";
		echo "";
		echo "OUTPUT";
		echo "  LPS-#####_LPS-#####_TitleCamelCased";
	else
		# Gather information
		ticket=$1;

		title="$(curl -s "https://liferay.atlassian.net/rest/api/2/issue/$ticket" | jq -r ".fields.summary")";
		parentTicket="$(curl -s "https://liferay.atlassian.net/rest/api/2/issue/$ticket" | jq -r ".fields.parent.key")";

		# -z = string is null and has zero length
		# @see https://tldp.org/LDP/abs/html/comparison-ops.html
		if [ -z "$title" ] || [ "$title" = "null" ]; then
			title=""
		fi;

		# @see https://stackoverflow.com/a/34420162/5092054
		titleCamelCased=$(sed -r 's/(^|"|-| | "|" )(\w)/\U\2/g' <<<"$title");

		# Build output
		output="$parentTicket"_"$ticket"_"$titleCamelCased";

		# Copy output to clipboard
		echo $output | pbcopy;

		# Success message
		echo "üìã Copied to clipboard:";
		echo "$output";
	fi
}

# Gets a labeled Jira link with ticket number and title for easy pasting on
# slack messages or notes.
#
# Example:
# jl LPS-155716
# **[LPS-155716](https://liferay.atlassian.net/browse/LPS-155716) SXPElement field localization breaks with nested fields**
jl() {
	if [ -z "$1" ] || [ "$1" = "help" ]; then
		echo "Creates a markdown for a jira ticket";
		echo "";
		echo "USAGE";
		echo "  jl LPS-######";
		echo "";
		echo "OUTPUT";
		echo "  [LPS-##### (Ticket title)](https://liferay.atlassian.net/browse/LPS-#####)";
	else
		# Gather information
		ticket=$1;
		title="$(curl -s "https://liferay.atlassian.net/rest/api/2/issue/$ticket" | jq -r ".fields.summary")";
		type="$(curl -s "https://liferay.atlassian.net/rest/api/2/issue/$ticket" | jq -r ".fields.issuetype.name")";

		# -z = string is null and has zero length
		# @see https://tldp.org/LDP/abs/html/comparison-ops.html
		if [ -z "$title" ] || [ "$title" = "null" ]; then
			title=""
		fi;

		# Get ticket type emoji
		if [ "$type" = "Story" ]; then
			typeEmoji="üìó"
		fi;

		# Get ticket type emoji
		if [ "$type" = "Bug" ] || [ "$type" = "Regression Bug" ]; then
			typeEmoji="üêû"
		fi;

		# Build message
		# message="**$typeEmoji [$ticket](https://liferay.atlassian.net/browse/$ticket) ($title)**"
		# message="$ticket ($title) https://liferay.atlassian.net/browse/$ticket"
		message="[$ticket ($title)](https://liferay.atlassian.net/browse/$ticket)"

		# Copy message to clipboard
		echo $message | pbcopy;

		# Success message
		echo "üìã Copied to clipboard:";
		echo "$message";
	fi
}

# Kill tomcat server
kt() {
	if [ -n "$1" ]; then
		echo "üü• Killing process for branch: $1\n"

		pkill -9 -f $1/bundles/tomcat;
	else
		echo "Kills a tomcat server."
		echo "Usage: kt branchName"
	fi
}

# Start tomcat server
st() {
	if [ -n "$1" ] && [ -n "$2" ]; then
		# [ -d "$HOME/Developer/$1-$2/bundles/tomcat-9.0.53/bin" ] && local tomcatPath="$HOME/Developer/$1-$2/bundles/tomcat-9.0.53/bin";
		# [ -d "$HOME/Developer/$1-$2/bundles/tomcat-9.0.56/bin" ] && local tomcatPath="$HOME/Developer/$1-$2/bundles/tomcat-9.0.56/bin";
		# [ -d "$HOME/Developer/$1-$2/bundles/tomcat-9.0.65/bin" ] && local tomcatPath="$HOME/Developer/$1-$2/bundles/tomcat-9.0.65/bin";
		# [ -d "$HOME/Developer/$1-$2/bundles/tomcat-9.0.68/bin" ] && local tomcatPath="$HOME/Developer/$1-$2/bundles/tomcat-9.0.68/bin";
		# [ -d "$HOME/Developer/$1-$2/bundles/tomcat-9.0.71/bin" ] && local tomcatPath="$HOME/Developer/$1-$2/bundles/tomcat-9.0.71/bin";
		# [ -d "$HOME/Developer/$1-$2/bundles/tomcat-9.0.73/bin" ] && local tomcatPath="$HOME/Developer/$1-$2/bundles/tomcat-9.0.73/bin";
		# [ -d "$HOME/Developer/$1-$2/bundles/tomcat-9.0.75/bin" ] && local tomcatPath="$HOME/Developer/$1-$2/bundles/tomcat-9.0.75/bin";
		# [ -d "$HOME/Developer/$1-$2/bundles/tomcat-9.0.80/bin" ] && local tomcatPath="$HOME/Developer/$1-$2/bundles/tomcat-9.0.80/bin";
		# [ -d "$HOME/Developer/$1-$2/bundles/tomcat-9.0.82/bin" ] && local tomcatPath="$HOME/Developer/$1-$2/bundles/tomcat-9.0.82/bin";
		# [ -d "$HOME/Developer/$1-$2/bundles/tomcat-9.0.83/bin" ] && local tomcatPath="$HOME/Developer/$1-$2/bundles/tomcat-9.0.83/bin";
		# [ -d "$HOME/Developer/$1-$2/bundles/tomcat-9.0.87/bin" ] && local tomcatPath="$HOME/Developer/$1-$2/bundles/tomcat-9.0.87/bin";
		[ -d "$HOME/Developer/$1-$2/bundles/tomcat-9.0.90/bin" ] && local tomcatPath="$HOME/Developer/$1-$2/bundles/tomcat-9.0.90/bin";

		cd $tomcatPath;

		echo "üåü Starting tomcat from: $tomcatPath\n"

		/$tomcatPath/catalina.sh jpda run;
	else
		echo "Starts a tomcat server from the specified [repo]/[branch] directory."
		echo "Usage: st [repo] [branch]"
		echo "Example: st liferay-portal master"
	fi
}

############################################################
# Gradle
############################################################
alias grcd1="../gradlew clean deploy"
alias grcd2="../../gradlew clean deploy"
alias grcd3="../../../gradlew clean deploy"
alias grcd4="../../../../gradlew clean deploy"
alias grcd5="../../../../../gradlew clean deploy"

alias grfs="gradle formatSource"

# Update master private
alias abwd="ant -f build-working-dir.xml"


############################################################
# Git
############################################################

alias gitclean='git clean -xd -e '\''**/*.iml'\'' -e .gradle/gradle.properties -e .idea -e '\''**/*.c02cm6mzmd6m.properties'\'''

############################################################
# Tomcat
############################################################

# Find specific processes
alias pj="ps -ef | rg java"
alias pt="ps -ef | rg bundles/tomcat/"

alias ptm='ps -ef | rg master/bundles/tomcat/ | rg java | awk '\''{print $2}'\'''

# Kill processes
alias km="kill -9 $(ptm)"

# Kill and restart servers
alias kmr="kill -9 $(ptm) && lrsm"

alias killp="kill -9"

############################################################
# Misc
############################################################

# Jira
alias jo=open_jira_ticket;

# IntelliJ Setup
# @see https://github.com/holatuwol/liferay-intellij#setup-instructions
alias ij='/Users/ktan/Developer/liferay-intellij/intellij "$@"'

# Overrides the default jmeter command since the app crashes using:
# open /usr/local/bin/jmeter
alias jmeter="open /usr/local/Cellar/jmeter/5.6.3/libexec/bin/jmeter"